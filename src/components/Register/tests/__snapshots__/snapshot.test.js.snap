// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RegisterSnapshotTests renders correctly page 0 1`] = `
<section>
  <form
    onSubmit={[Function]}
  >
    <InputWithError
      data-testid="usernameContainer"
      input={
        <input
          autoComplete="username"
          data-testid="username"
          maxLength={20}
          minLength={8}
          name="username"
          onChange={[Function]}
          placeholder="username"
          required={true}
          type=""
          value=""
        />
      }
    />
    <InputWithError
      data-testid="emailContainer"
      input={
        <input
          autoComplete="email"
          data-testid="email"
          name="email"
          onChange={[Function]}
          placeholder="email"
          required={true}
          type="email"
          value=""
        />
      }
    />
    <InputWithError
      data-testid="passwordContainer"
      input={
        <styled.div>
          <input
            autoComplete="new-password"
            data-testid="password"
            maxLength={22}
            minLength={10}
            name="password"
            onChange={[Function]}
            placeholder="password"
            required={true}
            type="password"
            value=""
          />
          <styled.button
            onClick={[Function]}
            type="button"
          >
            <FontAwesomeIcon
              border={false}
              className=""
              fixedWidth={false}
              flip={null}
              icon={
                Object {
                  "icon": Array [
                    576,
                    512,
                    Array [],
                    "f06e",
                    "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z",
                  ],
                  "iconName": "eye",
                  "prefix": "fas",
                }
              }
              inverse={false}
              listItem={false}
              mask={null}
              pull={null}
              pulse={false}
              rotation={null}
              size={null}
              spin={false}
              swapOpacity={false}
              symbol={false}
              title=""
              transform={null}
            />
          </styled.button>
        </styled.div>
      }
    />
    <InputWithError
      data-testid="repeatPasswordContainer"
      input={
        <styled.div>
          <input
            autoComplete="new-password"
            data-testid="repeatPassword"
            name="repeatPassword"
            onChange={[Function]}
            placeholder="repeat"
            required={true}
            type="password"
            value=""
          />
          <styled.button
            onClick={[Function]}
            type="button"
          >
            <FontAwesomeIcon
              border={false}
              className=""
              fixedWidth={false}
              flip={null}
              icon={
                Object {
                  "icon": Array [
                    576,
                    512,
                    Array [],
                    "f06e",
                    "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z",
                  ],
                  "iconName": "eye",
                  "prefix": "fas",
                }
              }
              inverse={false}
              listItem={false}
              mask={null}
              pull={null}
              pulse={false}
              rotation={null}
              size={null}
              spin={false}
              swapOpacity={false}
              symbol={false}
              title=""
              transform={null}
            />
          </styled.button>
        </styled.div>
      }
    />
    <button
      data-testid="next"
      type="submit"
    >
      next
    </button>
    <span
      data-testid="redirect"
    >
      Already have an account?
      <Link
        to="/login"
      >
         Sign in.
      </Link>
    </span>
  </form>
</section>
`;

exports[`RegisterSnapshotTests renders correctly page 1 1`] = `
<section>
  <form
    onSubmit={[Function]}
  >
    <InputWithError
      data-testid="firstNameContainer"
      input={
        <input
          data-testid="firstName"
          name="firstName"
          onChange={[Function]}
          placeholder="First name"
          required={true}
          type=""
          value=""
        />
      }
    />
    <InputWithError
      data-testid="lastNameContainer"
      input={
        <input
          data-testid="lastName"
          name="lastName"
          onChange={[Function]}
          placeholder="Last name"
          required={true}
          type=""
          value=""
        />
      }
    />
    <InputWithError
      data-testid="countryContainer"
      input={
        <input
          data-testid="country"
          name="country"
          onChange={[Function]}
          placeholder="country"
          type=""
          value=""
        />
      }
    />
    <InputWithError
      data-testid="ageContainer"
      input={
        <input
          data-testid="age"
          name="age"
          onChange={[Function]}
          required={true}
          type="number"
          value=""
        />
      }
    />
    <button
      data-testid="back"
      onClick={[Function]}
    >
      back
    </button>
    <button
      data-testid="register"
      type="submit"
    >
      register
    </button>
  </form>
</section>
`;

exports[`RegisterSnapshotTests renders correctly with passed errors props and page 0 1`] = `
<section>
  <form
    onSubmit={[Function]}
  >
    <InputWithError
      data-testid="usernameContainer"
      error="Username is already taken."
      input={
        <input
          autoComplete="username"
          data-testid="username"
          maxLength={20}
          minLength={8}
          name="username"
          onChange={[Function]}
          placeholder="username"
          required={true}
          type=""
          value=""
        />
      }
    />
    <InputWithError
      data-testid="emailContainer"
      error="Email is already taken."
      input={
        <input
          autoComplete="email"
          data-testid="email"
          name="email"
          onChange={[Function]}
          placeholder="email"
          required={true}
          type="email"
          value=""
        />
      }
    />
    <InputWithError
      data-testid="passwordContainer"
      error="Password must be between 10 and 20 characters."
      input={
        <styled.div>
          <input
            autoComplete="new-password"
            data-testid="password"
            maxLength={22}
            minLength={10}
            name="password"
            onChange={[Function]}
            placeholder="password"
            required={true}
            type="password"
            value=""
          />
          <styled.button
            onClick={[Function]}
            type="button"
          >
            <FontAwesomeIcon
              border={false}
              className=""
              fixedWidth={false}
              flip={null}
              icon={
                Object {
                  "icon": Array [
                    576,
                    512,
                    Array [],
                    "f06e",
                    "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z",
                  ],
                  "iconName": "eye",
                  "prefix": "fas",
                }
              }
              inverse={false}
              listItem={false}
              mask={null}
              pull={null}
              pulse={false}
              rotation={null}
              size={null}
              spin={false}
              swapOpacity={false}
              symbol={false}
              title=""
              transform={null}
            />
          </styled.button>
        </styled.div>
      }
    />
    <InputWithError
      data-testid="repeatPasswordContainer"
      error="Password must be between 10 and 20 characters."
      input={
        <styled.div>
          <input
            autoComplete="new-password"
            data-testid="repeatPassword"
            name="repeatPassword"
            onChange={[Function]}
            placeholder="repeat"
            required={true}
            type="password"
            value=""
          />
          <styled.button
            onClick={[Function]}
            type="button"
          >
            <FontAwesomeIcon
              border={false}
              className=""
              fixedWidth={false}
              flip={null}
              icon={
                Object {
                  "icon": Array [
                    576,
                    512,
                    Array [],
                    "f06e",
                    "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z",
                  ],
                  "iconName": "eye",
                  "prefix": "fas",
                }
              }
              inverse={false}
              listItem={false}
              mask={null}
              pull={null}
              pulse={false}
              rotation={null}
              size={null}
              spin={false}
              swapOpacity={false}
              symbol={false}
              title=""
              transform={null}
            />
          </styled.button>
        </styled.div>
      }
    />
    <button
      data-testid="next"
      type="submit"
    >
      next
    </button>
    <span
      data-testid="redirect"
    >
      Already have an account?
      <Link
        to="/login"
      >
         Sign in.
      </Link>
    </span>
  </form>
</section>
`;

exports[`RegisterSnapshotTests renders correctly with passed errors props and page 1 1`] = `
<section>
  <form
    onSubmit={[Function]}
  >
    <InputWithError
      data-testid="firstNameContainer"
      error="First name is required."
      input={
        <input
          data-testid="firstName"
          name="firstName"
          onChange={[Function]}
          placeholder="First name"
          required={true}
          type=""
          value=""
        />
      }
    />
    <InputWithError
      data-testid="lastNameContainer"
      error="Last name is required."
      input={
        <input
          data-testid="lastName"
          name="lastName"
          onChange={[Function]}
          placeholder="Last name"
          required={true}
          type=""
          value=""
        />
      }
    />
    <InputWithError
      data-testid="countryContainer"
      error="Country is invalid."
      input={
        <input
          data-testid="country"
          name="country"
          onChange={[Function]}
          placeholder="country"
          type=""
          value=""
        />
      }
    />
    <InputWithError
      data-testid="ageContainer"
      error="Age is required."
      input={
        <input
          data-testid="age"
          name="age"
          onChange={[Function]}
          required={true}
          type="number"
          value=""
        />
      }
    />
    <button
      data-testid="back"
      onClick={[Function]}
    >
      back
    </button>
    <button
      data-testid="register"
      type="submit"
    >
      register
    </button>
  </form>
</section>
`;
